AWSTemplateFormatVersion: 2010-09-09

Description: Deploy an Secure Listerner for ALB to support HTTPS connection.

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Select the VPC
    Default: vpc-097728e00a72ac827 # Default VPC
  SubnetIdOne:
    Type: AWS::EC2::Subnet::Id
    Description: Select the first subnet for the ALB and Instance
    Default: subnet-01e6764eb590a6eb3 # Default Subnet 1
  SubnetIdTwo:
    Type: AWS::EC2::Subnet::Id
    Description: Select the second subnet for the ALB and Instance
    Default: subnet-08e8eaec953c85086 # Default Subnet 2
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI ID for the EC2 instances
    Default: ami-03a725ae7d906005d # Amazon Linux 2023 AMI 64-bit (x86) in eu-west-2
  InstanceType:
    Type: String
    Description: EC2 instance type
    Default: t2.micro
  HostedZoneId:
    Type: String
    Description: Existing hosted zone ID
    Default: Z00226231TM9RP3FCC7TD # for goodguys.click hosted zone
  CertificateArn:
    Type: String
    Description: ARN of an ACM certificate
  DomainName:
    Type: String
    Description: Alternate Subdomain for the ALB
    Default: secure-alb.goodguys.click

Resources:
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to the load balancer
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - Description: Allow HTTP from any where
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTPS from any where
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from the ALB
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          # Fetch the token for IMDSv2
          TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" || echo ""`
          # Use the token to fetch the availability zone
          if [ -n "$TOKEN" ]; then
            AZ=`curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/placement/availability-zone`
          else
            AZ="Unknown"
          fi
          echo "<h1>This instance is in Availability Zone: $AZ</h1>" > /var/www/html/index.html

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyAutoScalingGroup
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "2"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref SubnetIdOne
        - !Ref SubnetIdTwo
      TargetGroupARNs:
        - !Ref TargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref SubnetIdOne
        - !Ref SubnetIdTwo
      SecurityGroups:
        - !Ref ALBSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCId
      HealthCheckEnabled: true
      HealthCheckPath: /
      Matcher:
        HttpCode: 200

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      SslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06 #See more here https://docs.aws.amazon.com/elasticloadbalancing/latest/application/describe-ssl-policies.html

  AliasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneId
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
        EvaluateTargetHealth: true

Outputs:
  HttpHost:
    Description: DNS host name for the ALB
    Value: !Sub http://${LoadBalancer.DNSName}
  HttpsHost:
    Description: Alternate HTTPS hostname for the ALB
    Value: !Sub https://${DomainName}
