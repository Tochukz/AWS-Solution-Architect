AWSTemplateFormatVersion: 2010-09-09

Description: This configuration creates a Gateway type VPC Endpoint that allows EC2 instance to access S3 privately

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Existing EC2 Keypair name
    Default: DevSimpleKey

Mappings:
  Images:
    eu-west-1:
      Ami: ami-04f87c366aa353bc5
    eu-west-2:
      Ami: ami-0fa3603ea544e5bf9
    eu-west-3:
      Ami: ami-0f139a4a2cdfff8d1

Resources:
  CustomVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: CustomVpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VpcGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CustomVpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CustomVpc
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CustomVpc
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CustomVpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttach
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SimpleEC2Role
      Description: IAM Role for EC2 Instance
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: SimpleEc2Profile
      Roles:
        - !Ref InstanceRole

  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebSecGroup
      GroupDescription: Allow SSH access from anywhere
      VpcId: !Ref CustomVpc
      SecurityGroupIngress:
        - Description: Allow SSH from anywhere
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap [Images, !Ref AWS::Region, Ami]
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      Tags:
        - Key: Name
          Value: SimpleInstance

  VpcEndpointToS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref CustomVpc
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3 # Check out VPC endpoint creation in the VPC console
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
      Tags:
        - Key: Name
          Value: SimpleS3Endpoint
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowAllS3Actions
            Effect: Allow
            # Effect: Deny
            Principal: "*"
            Action: "*"
            Resource: "*"

Outputs:
  PublicIp:
    Description: Public IP for the EC2 instance
    Value: !GetAtt Ec2Instance.PublicIp
