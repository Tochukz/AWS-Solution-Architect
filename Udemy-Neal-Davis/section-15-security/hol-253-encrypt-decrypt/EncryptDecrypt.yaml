AWSTemplateFormatVersion: 2010-09-09

Description: Create KMS Key with Key Policy that allows EC2 instance role

Mappings:
  Images: # Amazon Linux 2023 AMI 64-bit (x86), uefi-preferred
    eu-west-1:
      Ami: ami-0720a3ca2735bf2fa
    eu-west-2:
      Ami: ami-04ba8620fc44e2264
    eu-west-3:
      Ami: ami-0960d166ab83fd695

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of the EC2 key pair to use for SSH access
    Default: DevSimpleKey
  AdminArns:
    Type: CommaDelimitedList
    Description: Comma-separated list of ARNs for administrators

Resources:
  Ec2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole

  Ec2Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref Ec2Role

  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SimpleSecurityGroup
      GroupDescription: "Allow SSH access"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !FindInMap [Images, !Ref AWS::Region, Ami]
      IamInstanceProfile: !Ref Ec2Profile
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt Ec2SecurityGroup.GroupId
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y

          # Install Python 3 and pip
          curl -O https://bootstrap.pypa.io/get-pip.py
          python3 get-pip.py --user

          # Install boto3
          pip install boto3

  SimpleKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "Key for encrypting and decrypting data"
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: AllowRootAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: kms:*
            Resource: "*"
          - Sid: AllowKeyAdministrators
            Effect: Allow
            Principal:
              AWS: !Ref AdminArns
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:TagResource
              - kms:UntagResource
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: "*"
          - Sid: AllowKeyUsers
            Effect: Allow
            Principal:
              AWS: !GetAtt Ec2Role.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: "*"
          - Sid: AllowKeyGrant
            Effect: Allow
            Principal:
              AWS: !GetAtt Ec2Role.Arn
            Action:
              - kms:CreateGrant
              - kms:ListGrants
              - kms:RevokeGrant
            Resource: "*"
            Condition:
              StringEquals:
                kms:ViaService: !Sub "ec2.${AWS::Region}.amazonaws.com"
                kms:GrantIsForAWSResource: "true"

  KeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/SimpleAlias
      TargetKeyId: !Ref SimpleKey

Outputs:
  PublicIp:
    Description: Public IP of the EC2 instance
    Value: !GetAtt Ec2Instance.PublicIp
  KeyId:
    Description: ID of the KMS Key
    Value: !Ref SimpleKey
  KeyArn:
    Description: ARN of the KMS Key
    Value: !GetAtt SimpleKey.Arn
