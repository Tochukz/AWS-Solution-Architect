AWSTemplateFormatVersion: 2010-09-09

Description: The template deploys an Applicaton Load Balancer with an Auto Scaling Group

Parameters:
  InstanceType:
    Type: String
    Description: Instance type for the EC2
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.micro

Mappings:
  Images: # Amazon Linux 2023 AMI 64-bit (x86), uefi-preferred
    eu-west-1:
      Ami: ami-0720a3ca2735bf2fa
    eu-west-2:
      Ami: ami-04ba8620fc44e2264
    eu-west-3:
      Ami: ami-0960d166ab83fd695

Resources:
  CustomVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: DemoVpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VpcGatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref CustomVpc
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CustomVpc
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: 10.0.0.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref CustomVpc
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: 10.0.128.0/17
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref CustomVpc

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
    DependsOn: VpcGatewayAttach

  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  WebSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebSecurityGroup
      GroupDescription: Allow  HTTP and SSH from anywhere
      VpcId: !Ref CustomVpc
      SecurityGroupIngress:
        - Description: Allow HTTP access
          IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: SimpleTemplate
      LaunchTemplateData:
        ImageId: !FindInMap [Images, !Ref AWS::Region, Ami]
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !GetAtt WebSecGroup.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash

            # Update the system and install necessary packages
            yum update -y
            yum install -y httpd

            # Start the Apache server
            systemctl start httpd
            systemctl enable httpd

            # Get the current AWS Region
            AWS_REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region)

            # Create the index.html file
            cat > /var/www/html/index.html <<EOF
            <html>
            <head>
              <title>Instance Availability Zone</title>
              <style>
                body {background: cornflowerblue;}
                h3 {margin-top: 45vh; color: white; text-align: center;}
              </style>
            </head>
            <body>
                <h3>This instance is located in  <b> $AWS_REGION </b> region</h3>
            </body>
            </html>
            EOF

            # Ensure the httpd service is correctly set up to start on boot
            chkconfig httpd on

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: SimpleTG
      VpcId: !Ref CustomVpc
      TargetType: instance
      Protocol: HTTP
      Port: 80
      ProtocolVersion: HTTP1
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: SimpleAutoScaling
      DesiredCapacity: 2
      MinSize: 1
      MaxSize: 3
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: 1 #  Either '$Default', '$Latest', or a numeric version are allowed
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      TargetGroupARNs:
        - !Ref TargetGroup
    DependsOn: VpcGatewayAttach

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: AppLoadBalancer
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt WebSecGroup.GroupId

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  DnsName:
    Description: DNS Name of the application load balancer
    Value: !GetAtt AppLoadBalancer.DNSName
