AWSTemplateFormatVersion: 2010-09-09

Resources:
  DynamoDb:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ProductVisits
      AttributeDefinitions:
        - AttributeName: ProductVisitKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: ProductVisitKey
          KeyType: HASH # partition key

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: ProductVisitsDataQueue

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRole
      Description: Role for Lambda
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: DynamoPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowPutItem
                Effect: Allow
                Action: dynamodb:PutItem
                Resource: !GetAtt DynamoDb.Arn

  LambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: EventDrivenFunc
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 15
      Code:
        ZipFile: |
          import os
          import json
          import boto3
          from uuid import uuid4

          region_name = os.environ.get('AWS_REGION', 'eu-west-1')  # Default to u-west-1 if not set
          boto3.setup_default_session(region_name=region_name)
          dynamodb = boto3.resource('dynamodb', region_name=region_name, api_version='2012-08-10')
          doc_client = dynamodb.Table('ProductVisits')

          def handler(event, context):  
              print('Received event:', json.dumps(event, indent=2))
              
              # Process each record in the event
              for record in event['Records']:
                  body = record['body']
                  print(body)
                  
                  body = json.loads(body)
                  
                  try:
                      required_fields = ['ProductId', 'ProductName', 'Category', 'PricePerUnit', 'CustomerId', 'CustomerName', 'TimeOfVisit']
                      if not all(field in body for field in required_fields):
                          print('Please provide values for product, category, customer, and time of visit.')
                          continue
                      
                      body['ProductVisitKey'] = str(uuid4())
                      
                      print(f"{body['ProductVisitKey']} {body['ProductId']} {body['ProductName']} {body['Category']} {body['PricePerUnit']} {body['CustomerId']} {body['CustomerName']} {body['TimeOfVisit']}")
                      
                      params = {
                          'Item': body
                      }
                      
                      doc_client.put_item(**params)
                      
                      print('Product Visit record is successfully created.')
                  
                  except Exception as e:
                      print(e)
                      
              return {}

  SqsLambdaEventSource:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 5
      EventSourceArn: !GetAtt Queue.Arn
      FunctionName: !GetAtt LambdaFunc.Arn
      Enabled: true

Outputs:
  QueueUrl:
    Description: Queue URL
    Value: !Ref Queue
