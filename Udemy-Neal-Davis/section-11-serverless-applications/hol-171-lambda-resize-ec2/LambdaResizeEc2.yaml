AWSTemplateFormatVersion: 2010-09-09

Description: Configures a Lambda Function that resizes an EC2 instance

Mappings:
  Images: # Amazon Linux 2023 AMI 64-bit (x86), uefi-preferred
    eu-west-1:
      Ami: ami-0720a3ca2735bf2fa
    eu-west-2:
      Ami: ami-04ba8620fc44e2264
    eu-west-3:
      Ami: ami-0960d166ab83fd695

Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.nano
      ImageId: !FindInMap [Images, !Ref AWS::Region, Ami]
      Tags:
        - Key: Name
          Value: ResizableInstance

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRole
      Description: Role for Lambda Function
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess

  LambdaFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ResizeEc2Func
      Runtime: python3.8
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 120
      Code:
        ZipFile: |
          import boto3
          from botocore.exceptions import WaiterError

          def wait_until_instance_stopped(ec2_client, instance_id):
              waiter = ec2_client.get_waiter('instance_stopped')
              try:
                  waiter.wait(InstanceIds=[instance_id])
              except WaiterError as e:
                  print(f"Error waiting for instance to stop: {e}")

          def handler(event, context):
              instance_id = event['instanceId']
              ec2_client = boto3.client('ec2')
              
              try:
                  ec2_client.stop_instances(InstanceIds=[instance_id])
                  wait_until_instance_stopped(ec2_client, instance_id)
                  ec2_client.modify_instance_attribute(InstanceId=instance_id, InstanceType={'Value': 't2.micro'})
                  ec2_client.start_instances(InstanceIds=[instance_id])
                  
                  return 'Instance resizing complete.'
              except Exception as e:
                  return f'Error resizing instance: {e}'

Outputs:
  InstanceId:
    Description: Instance Id of the EC2 instance
    Value: !Ref Ec2Instance
