AWSTemplateFormatVersion: 2010-09-09

Description: This template configures an Application Load Balancer that distributes traffic to a target group with two EC2 instances

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Vpc Id
    Default: vpc-097728e00a72ac827 # Default VPC
  SubnetId1:
    Type: AWS::EC2::Subnet::Id
    Description: First subnet Id in the Vpc provided
    Default: subnet-01e6764eb590a6eb3 # Default Subnet 1
  SubnetId2:
    Type: AWS::EC2::Subnet::Id
    Description: Second subnet Id in the Vpc provided
    Default: subnet-08e8eaec953c85086 # Default Subnet 2
  InstanceType:
    Type: String
    Description: EC2 instance type
    AllowedValues:
      - t2.micro
      - t3.micro
    Default: t2.micro
  ImageId:
    Type: AWS::EC2::Image::Id
    Description: Amazon Machine Image
    Default: ami-0abb41dc69b6b6704 # Amazon Linux 2 AMI 64-bit (x86)
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Keypair name
    Default: DevSimpleKey
  TemplateBucket:
    Type: String
    Description: S3 bucket where child templates are stored
    Default: chucks-workspace-storage
  ArtifactBucket:
    Type: String
    Description: S3 bucket for code artifacts
    Default: chucks-workspace-storage
  LayerArtifactVersion:
    Type: String
    Description: The version of the layer artifact e.g 1.0.0
    Default: "0.0.1"
  LayerVersion:
    Type: Number
    Description: Layer version
    Default: 1

Resources:
  AlbSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: AlbSecGroup
      GroupDescription: Application Load Balancer security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Allows HTTP access
          IpProtocol: TCP
          FromPort: 80
          ToPort: 90
          CidrIp: 0.0.0.0/0

  WebSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: WebSecGroup
      GroupDescription: Web server security group SSH and HTTP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - Description: Allow SSH access to all
          IpProtocol: TCP
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - Description: Allow HTTP traffic originating from AlbSecGroup only
          IpProtocol: TCP
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt AlbSecGroup.GroupId

  Ec2Instance1:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateBucket}.s3.${AWS::Region}.amazonaws.com/templates/AlbEc2Child.yaml
      Parameters:
        InstanceType: !Ref InstanceType
        ImageId: !Ref ImageId
        KeyName: !Ref KeyName
        SubnetId: !Ref SubnetId1
        WebSecGroup: !Ref WebSecGroup
        TagName: DemoInstance1

  ExpressLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: ExpressModule
      Description: Node module of express application
      Content:
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Sub v${LayerArtifactVersion}/shared-module.zip
      CompatibleRuntimes:
        - nodejs20.x

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SimpleLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  CatalogLambda:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://${TemplateBucket}.s3.${AWS::Region}.amazonaws.com/templates/AlbLambdaChild.yaml
      Parameters:
        FunctionName: CatalogFunc
        LambdaRoleArn: !GetAtt LambdaRole.Arn
        LayerVersionArn: !GetAtt ExpressLayer.LayerVersionArn
        ArtifactBucket: !Ref ArtifactBucket
        CodeVersion: "0.0.1"
        PackageName: catalog-management.zip

  # UserLambda:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://${TemplateBucket}.s3.${AWS::Region}.amazonaws.com/templates/AlbLambdaChild.yaml
  #     Parameters:
  #       FunctionName: UserFunc
  #       LambdaRoleArn: !GetAtt LambdaRole.Arn
  #       LayerVersionArn: !GetAtt ExpressLayer.LayerVersionArn
  #       ArtifactBucket: !Ref ArtifactBucket
  #       CodeVersion: "0.0.1"
  #       PackageName: user-management.zip

  MainTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MainTarget
      Protocol: HTTP
      Port: 80
      VpcId: !Ref VpcId
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /
      TargetType: instance
      Targets:
        - Id: !GetAtt Ec2Instance1.Outputs.InstanceId
        # - Id: !GetAtt Ec2Instance2.Outputs.InstanceId # More instances can be added

  CatalogTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: CatalogTarget
      HealthCheckEnabled: false
      TargetType: lambda
      Targets:
        - Id: !GetAtt CatalogLambda.Outputs.LambdaArn

  # UserTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: CatalogTarget
  #     HealthCheckEnabled: false
  #     TargetType: lambda
  #     Targets:
  #       - Id: !GetAtt UserLambda.Outputs.LambdaArn

  AlbBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: SimpleBalancer
      Scheme: internet-facing
      Subnets:
        - !Ref SubnetId1
        - !Ref SubnetId2
      SecurityGroups:
        - !Ref AlbSecGroup

  CatalogFuncPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CatalogLambda.Outputs.FunctionName
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
      SourceArn: !Ref AlbListener

  # UserFuncPermission:
  #   Type: AWS::Lambda::Permission
  #   Properties:
  #     FunctionName: !GetAtt UserLambda.Outputs.FunctionName
  #     Action: lambda:InvokeFunction
  #     Principal: elasticloadbalancing.amazonaws.com
  #     SourceArn: !Ref AlbListener

  AlbListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AlbBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MainTargetGroup

  CatalogListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref AlbListener
      Priority: 1
      Actions:
        - Type: forward
          TargetGroupArn: !Ref CatalogTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "/product/*"

Outputs:
  LoadBalancerDns:
    Description: DNS name of the ALB
    Value: !GetAtt AlbBalancer.DNSName
    Export:
      Name: LoadBalancerDns
  InstanceId1:
    Description: First EC2 instance ID
    Value: !GetAtt Ec2Instance1.Outputs.InstanceId
    Export:
      Name: InstanceId1
  LambdaRoleArn:
    Description: Remove this
    Value: !GetAtt LambdaRole.Arn
  LayerArn:
    Description: Remove this
    Value: !GetAtt ExpressLayer.LayerVersionArn
