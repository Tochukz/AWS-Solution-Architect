AWSTemplateFormatVersion: 2010-09-09

Description: This template configures an API Gateway with a Lambda function backend.

Parameters:
  StageName:
    Type: String
    Description: Name for the API gateway stage
    AllowedValues:
      - dev
      - staging
      - prod
    Default: dev
  Path:
    Type: String
    Description: Path for the method
    Default: demo

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaRole
      Description: Role for a Lambda Func
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  BasicFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: BasicFunc
      Handler: index.handler
      MemorySize: 256 # 0.25GB
      Architectures:
        - x86_64
      Runtime: python3.12
      Role: !GetAtt LambdaRole.Arn
      Code:
        ZipFile: |
          import json

          def handler(event, context):
            body = "Staff Engineer Chucks"
            statusCode = 200
            return {
              "statusCode": statusCode,
              "body": json.dumps(body),
              "headers": { 
                "Content-Type": "application/json"
              }
            }

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SimpleApi
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: !Ref Path # "{proxy+}"

  SimpleGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      # ResourceId: !Ref ApiResource
      ResourceId: !GetAtt ApiGateway.RootResourceId
      HttpMethod: ANY #GET
      # OperationName: HomePage
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri:
          !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BasicFunc.Arn}/invocations
          # "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaForSimpleProxy.Arn}/invocations"
          # arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BasicFunc
      Principal: apigateway.amazonaws.com
      SourceArn:
        !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway.RestApiId}/*/GET/
        # !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/ApiResource

        # - ApiId: !Ref ApiGateway

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: SimpleGetMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref StageName

Outputs:
  ApiEndpoint:
    Description: "API Gateway Invoke URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/${Path}"
