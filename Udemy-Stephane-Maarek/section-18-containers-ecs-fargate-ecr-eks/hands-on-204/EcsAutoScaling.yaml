AWSTemplateFormatVersion: 2010-09-09

Description: This template build on the hands-on-202/EcsCluster.yaml template by adding a Task Definition resource to the stack

Parameters:
  DockerImage:
    Type: String
    Description: Public docker image
    Default: nginxdemos/hello # See the image at https://hub.docker.com/r/nginxdemos/hello/
    # For DockerHub repository it can be [provider/image]
    # For Other respository, format must be [repository-url/image:tag] or [repository-url/image@digest]
  BucketArn:
    Type: String
    Description: Bucket ARN for an existing bucket for the application
    Default: arn:aws:s3:::chucks-workspace-storage
  ContainerName:
    Type: String
    Description: Name for the container
    Default: NginxDemoHello

Resources:
  SimpleCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !ImportValue Network-ClusterName

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EcsTaskExecRole
      Description: Role for ECS Service Task management
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EcsTaskRole
      Description: Role for ECS container application
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com
      Policies:
        - PolicyName: EcsTaskPolicy
          PolicyDocument:
            Version: 2012-10-17
            Id: AllowS3ListRead
            Statement:
              - Sid: AllowObjectRead
                Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub ${BucketArn}/*
              - Sid: AllowObjectListing
                Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref BucketArn

  ContainerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/containers/${ContainerName}
      RetentionInDays: 14

  TaskDef:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: DevAppFamily
      Cpu: 512 #0.5 vCPU
      Memory: 1024 # IGB RAM
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      EphemeralStorage:
        SizeInGiB: 21
      ContainerDefinitions:
        - Name: !Ref ContainerName
          Image: !Ref DockerImage
          Cpu: 256
          Memory: 512
          Essential: true
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ContainerLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx-container

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: NginxServerBalancer
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !ImportValue Network-WebSecurityGroupId # Imported from the Network Stack, see the Network.yaml template
      Subnets:
        - !ImportValue Network-PublicSubnetId1
        - !ImportValue Network-PublicSubnetId2
        - !ImportValue Network-PublicSubnetId3

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue Network-VpcId
      Protocol: HTTP
      Port: 80
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref SimpleCluster
      ServiceName: NginxHelloServer
      LaunchType: FARGATE
      TaskDefinition: !Ref TaskDef
      SchedulingStrategy: REPLICA
      DesiredCount: 1
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: !Ref ContainerName
          ContainerPort: 80
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue Network-WebSecurityGroupId # Imported from the Network Stack, see the Network.yaml template
          Subnets:
            - !ImportValue Network-PublicSubnetId1
            - !ImportValue Network-PublicSubnetId2
            - !ImportValue Network-PublicSubnetId3

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AutoScalingRole
      Description: Role for Scalable Target
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: allow
            Action: sts:AssumeRole
            Principal:
              Service: application-autoscaling.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Sub service/${SimpleCluster}/${EcsService.Name} # Format: service/cluster-name/service-name.
      # RoleARN: !GetAtt AutoScalingRole.Arn
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService
      # See https://docs.aws.amazon.com/autoscaling/application/userguide/application-auto-scaling-service-linked-roles.html
      # Also see https://docs.aws.amazon.com/autoscaling/application/userguide/security-iam-awsmanpol.html
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: DemoScaling
      PolicyType: TargetTrackingScaling # or StepScaling, PredictiveScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization # or ECSServiceAverageMemoryUtilization, ALBRequestCountPerTarget?
        TargetValue: 3 # 3% Avg. CPU Utilization
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

Outputs:
  DnsName:
    Description: DNS name for the Application Load Balancer
    Value: !GetAtt LoadBalancer.DNSName
