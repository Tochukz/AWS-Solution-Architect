AWSTemplateFormatVersion: 2010-09-09

Description: Schedule messages to SQS using EventBridge Scheduler with one-time and recurring options

Parameters:
  DateTime:
    Type: String
    Default: "2025-09-12T16:43:00"
    Description: Future time for one-time scheduling in UTC format (yyyy-mm-ddThh:mm:ss)

Resources:
  SimpleQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: simple-queue-1209
      VisibilityTimeout: 90 # Must be greater than Lambda timeout for EventSourceMapping

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSPollingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt SimpleQueue.Arn

  SimpleFunc:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: DelayedProcessor
      Runtime: python3.11
      Role: !GetAtt LambdaRole.Arn
      Handler: index.handler
      Timeout: 60
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              for record in event['Records']:
                  body = record['body']
                  print(f"Processing message: {body}")
              return {"statusCode": 200}

  QueueSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !GetAtt SimpleQueue.Arn
      FunctionName: !Ref SimpleFunc
      Enabled: true

  SchedulerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: scheduler.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowSendToSQS
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sqs:SendMessage
                Resource: !GetAtt SimpleQueue.Arn

  OneTimeSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: OneTimeSchedule
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: !Sub "at(${DateTime})" # at expression - at(yyyy-mm-ddThh:mm:ss)
      Target:
        Arn: !GetAtt SimpleQueue.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: !Sub | # Queue Message body as JSON
          {
            "message": "One time scheduled message",
            "scheduledDelay": "${DateTime} minutes"
          }

  # Use rate() or cron() in EventBridge Scheduler to trigger every 30 or 60 minutes.
  RecurringSchedule:
    Type: AWS::Scheduler::Schedule
    Properties:
      Name: RecurringSchedule
      FlexibleTimeWindow:
        Mode: "OFF"
      ScheduleExpression: "rate(30 minutes)" # or "rate(60 minutes)"
      Target:
        Arn: !GetAtt SimpleQueue.Arn
        RoleArn: !GetAtt SchedulerRole.Arn
        Input: |
          {
            "functionName": "runChecks",
            "message": "Run every 30 minutes"
          }
