AWSTemplateFormatVersion: 2010-09-09

Description: Solution to process long running jobs using Queues, Step Function, and Lambdas.

Resources:
  ScheduledEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: Daily1AmTrigger
      Description: Invoke the DataPreparationFunc at 1am daily
      ScheduleExpression: "cron(30 21 * * ? *)" # 21:30 every day London time
      State: ENABLED
      Targets:
        - Arn: !ImportValue Workers-DataPreparationFuncArn
          Id: DataPreparationFunc

  DataPreparationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !ImportValue Workers-DataPreparationFuncName
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledEventRule.Arn

  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowFuncInvoke
                Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !ImportValue Workers-PdfGenerationFuncArn
                  - !ImportValue Workers-PdfMailerFuncArn

  PdfGenStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Step Function to process SQS queue until empty",
            "StartAt": "PdfGeneration",
            "States": {
              "PdfGeneration": {
                "Type": "Task",
                "Resource": "${PdfGenerationFuncArn}",
                "Parameters": {
                  "queueUrl": "${QueueUrl}"
                },
                "Next": "IsQueueEmpty"
              },
              "IsQueueEmpty": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.messageCount",
                    "NumericEquals": 0,
                    "Next": "QueueEmpty"
                  }
                ],
                "Default": "WaitAndRetry"
              },
              "WaitAndRetry": {
                "Type": "Wait",
                "Seconds": 60,
                "Next": "PdfGeneration"
              },
              "QueueEmpty": {
                "Type": "Pass",
                "End": true
              }
            }
          }
        - PdfGenerationFuncArn: !ImportValue Workers-PdfGenerationFuncArn
          QueueUrl: "empty"

  PdfMailerStepFunc:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      DefinitionString: !Sub
        - |-
          {
            "Comment": "Step Function to process SQS queue until empty",
            "StartAt": "PdfMailer",
            "States": {
              "PdfMailer": {
                "Type": "Task",
                "Resource": "${PdfMailerFuncArn}",
                "Parameters": {
                  "queueUrl": "${QueueUrl}"
                },
                "Next": "IsQueueEmpty"
              },
              "IsQueueEmpty": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.messageCount",
                    "NumericEquals": 0,
                    "Next": "QueueEmpty"
                  }
                ],
                "Default": "WaitAndRetry"
              },
              "WaitAndRetry": {
                "Type": "Wait",
                "Seconds": 60,
                "Next": "PdfMailer"
              },
              "QueueEmpty": {
                "Type": "Pass",
                "End": true
              }
            }
          }
        - PdfMailerFuncArn: !ImportValue Workers-PdfMailerFuncArn
          QueueUrl: "empty"

  EventBridgeStepFuncRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EventBrigeStepFuncRole
      Description: Allow event bridge to start execution of state machine
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: EventBrigeStepFuncPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowBrigeStartExecution
                Effect: Allow
                Action: states:StartExecution
                Resource:
                  - !Ref PdfGenStepFunc
                  - !Ref PdfMailerStepFunc

  PdfGenEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: PdfGenerationEventRule
      EventPattern:
        source:
          - job.processor
        detail-type:
          - PdfGenEvent
      State: ENABLED
      Targets:
        - Arn: !Ref PdfGenStepFunc
          Id: PdfGenTarget
          RoleArn: !GetAtt EventBridgeStepFuncRole.Arn

  PdfMailerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: PdfMailerEventRule
      EventPattern:
        source:
          - job.processor
        detail-type:
          - PdfMailerEvent
      State: ENABLED
      Targets:
        - Arn: !Ref PdfMailerStepFunc
          Id: PdfMailerTarget
          RoleArn: !GetAtt EventBridgeStepFuncRole.Arn
